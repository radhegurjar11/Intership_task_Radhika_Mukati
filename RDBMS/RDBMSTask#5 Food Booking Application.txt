CREATE TABLE Restaurants (
    RestaurantID INT PRIMARY KEY,
    Name VARCHAR(100),
    City VARCHAR(50),
    CuisineType VARCHAR(50),
    Rating DECIMAL(2, 1),
    AverageCostForTwo DECIMAL(10, 2)
);

INSERT INTO Restaurants (RestaurantID, Name, City, CuisineType, Rating, AverageCostForTwo)
VALUES
(1, 'Tasty Bites', 'Mumbai', 'Italian', 4.7, 1200),
(2, 'Spicy Treats', 'Delhi', 'Indian', 4.5, 800),
(3, 'The Asian Bowl', 'Mumbai', 'Chinese', 4.2, 1500),
(4, 'Pizza Palace', 'Mumbai', 'Italian', 4.9, 1000),
(5, 'The Curry House', 'Bangalore', 'Indian', 4.1, 900);

-- Table: Customers
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Phone VARCHAR(15),
    City VARCHAR(50),
    JoinDate DATE
);

-- Insert into Customers
INSERT INTO Customers (CustomerID, FirstName, LastName, Phone, City, JoinDate)
VALUES
(1, 'John', 'Doe', '1234567890', 'Mumbai', '2023-01-10'),
(2, 'Jane', 'Smith', '1234567891', 'Delhi', '2023-02-15'),
(3, 'Sam', 'Wilson', '1234567892', 'Mumbai', '2023-03-20'),
(4, 'Alice', 'Brown', '1234567893', 'Bangalore', '2023-04-25'),
(5, 'Mark', 'Taylor', '1234567894', 'Chennai', '2023-05-30');

-- Table: Orders
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    RestaurantID INT,
    OrderDate DATE,
    OrderAmount DECIMAL(10, 2),
    OrderStatus VARCHAR(20),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

-- Insert into Orders
INSERT INTO Orders (OrderID, CustomerID, RestaurantID, OrderDate, OrderAmount, OrderStatus)
VALUES
(1, 1, 1, '2023-07-10', 1200, 'Delivered'),
(2, 2, 2, '2023-07-12', 800, 'Delivered'),
(3, 3, 1, '2023-07-15', 1500, 'Cancelled'),
(4, 4, 3, '2023-07-18', 1800, 'Delivered'),
(5, 5, 4, '2023-07-20', 1000, 'Pending');

CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY,
    CustomerID INT,
    RestaurantID INT,
    Rating DECIMAL(2, 1),
    Comment TEXT,
    ReviewDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

-- Insert into Reviews
INSERT INTO Reviews (ReviewID, CustomerID, RestaurantID, Rating, Comment, ReviewDate)
VALUES
(1, 1, 1, 5.0, 'Amazing food!', '2023-07-11'),
(2, 2, 2, 4.5, 'Good service!', '2023-07-13'),
(3, 3, 1, 4.0, 'Decent experience', '2023-07-16'),
(4, 4, 3, 4.8, 'Great flavors!', '2023-07-19'),
(5, 5, 4, 5.0, 'Best pizza ever!', '2023-07-21');

-- Table: Payments
CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY,
    OrderID INT,
    PaymentMethod VARCHAR(20),
    Amount DECIMAL(10, 2),
    PaymentDate DATE,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

-- Insert into Payments
INSERT INTO Payments (PaymentID, OrderID, PaymentMethod, Amount, PaymentDate)
VALUES
(1, 1, 'Card', 1200, '2023-07-10'),
(2, 2, 'Wallet', 800, '2023-07-12'),
(3, 4, 'Cash', 1800, '2023-07-18');


1.Retrieve the names and locations of restaurants with a rating of 4.5 or higher.
SELECT Name, City
FROM Restaurants
WHERE Rating >= 4.5;

2.Find the total number of orders placed by each customer.
SELECT c.FirstName, c.LastName, COUNT(o.OrderID) AS TotalOrders
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID;

3.List all restaurants offering "Italian" cuisine in "Mumbai".
SELECT Name
FROM Restaurants
WHERE CuisineType = 'Italian' AND City = 'Mumbai';

4.Calculate the total revenue generated by each restaurant from completed orders.
SELECT r.Name, SUM(o.OrderAmount) AS TotalRevenue
FROM Restaurants r
JOIN Orders o ON r.RestaurantID = o.RestaurantID
WHERE o.OrderStatus = 'Delivered'
GROUP BY r.RestaurantID;

5.Retrieve the most recent order placed by each customer.
SELECT c.FirstName, c.LastName, MAX(o.OrderDate) AS MostRecentOrder
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID;

6.List customers who have not placed any orders yet.
SELECT FirstName, LastName
FROM Customers
WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders);

7.Identify the most reviewed restaurants.
SELECT r.Name, COUNT(rv.ReviewID) AS TotalReviews
FROM Restaurants r
JOIN Reviews rv ON r.RestaurantID = rv.RestaurantID
GROUP BY r.RestaurantID
ORDER BY TotalReviews DESC
LIMIT 1;

8.Find the most preferred payment method.
SELECT PaymentMethod, COUNT(PaymentID) AS Frequency
FROM Payments
GROUP BY PaymentMethod
ORDER BY Frequency DESC
LIMIT 1;

9.List the top 5 restaurants by total revenue.
SELECT r.Name, SUM(o.OrderAmount) AS TotalRevenue
FROM Restaurants r
JOIN Orders o ON r.RestaurantID = o.RestaurantID
WHERE o.OrderStatus = 'Delivered'
GROUP BY r.RestaurantID
ORDER BY TotalRevenue DESC
LIMIT 5;

10.Show the details of all cancelled orders along with the customer's and restaurant's names.
SELECT o.OrderID, c.FirstName, c.LastName, r.Name AS RestaurantName, o.OrderAmount
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
WHERE o.OrderStatus = 'Cancelled';


