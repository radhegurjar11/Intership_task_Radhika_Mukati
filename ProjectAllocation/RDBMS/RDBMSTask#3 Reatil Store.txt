create database schema3;

-- Creating Customers Table
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100),
    phone VARCHAR(20),
    address TEXT,
    join_date DATE
);

-- Inserting Data into Customers Table
INSERT INTO Customers VALUES
(1, 'John', 'Doe', 'john.doe@example.com', '1234567890', '123 Main St', '2023-01-01'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', '0987654321', '456 Oak St', '2023-02-01'),
(3, 'Alice', 'Johnson', 'alice.johnson@example.com', '5678901234', '789 Pine St', '2023-03-01');



-- Creating Products Table
CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    category VARCHAR(50),
    price DECIMAL(10, 2),
    stock_quantity INT
);

-- Inserting Data into Products Table
INSERT INTO Products VALUES
(1, 'Laptop', 'Electronics', 800.00, 10),
(2, 'Smartphone', 'Electronics', 500.00, 20),
(3, 'Headphones', 'Accessories', 50.00, 50),
(4, 'Desk', 'Furniture', 150.00, 5),
(5, 'Chair', 'Furniture', 75.00, 10);


-- Creating Orders Table
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    order_status VARCHAR(20),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Inserting Data into Orders Table
INSERT INTO Orders VALUES
(1, 1, '2023-12-01', 850.00, 'Pending'),
(2, 2, '2023-12-02', 125.00, 'Shipped'),
(3, 1, '2023-12-03', 500.00, 'Shipped');


-- Creating OrderDetails Table
CREATE TABLE OrderDetails (
    order_detail_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    unit_price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Inserting Data into OrderDetails Table
INSERT INTO OrderDetails VALUES
(1, 1, 1, 1, 800.00),
(2, 1, 3, 1, 50.00),
(3, 2, 4, 1, 150.00),
(4, 2, 5, 1, 75.00),
(5, 3, 2, 1, 500.00);


-- Creating Payments Table
CREATE TABLE Payments (
    payment_id INT PRIMARY KEY,
    order_id INT,
    payment_date DATE,
    payment_amount DECIMAL(10, 2),
    payment_method VARCHAR(20),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

-- Inserting Data into Payments Table
INSERT INTO Payments VALUES
(1, 1, '2023-12-01', 850.00, 'Credit Card'),
(2, 2, '2023-12-02', 125.00, 'PayPal'),
(3, 3, '2023-12-03', 500.00, 'Debit Card');

-- Query 1: Total Number of Orders for Each Customer
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    COUNT(o.order_id) AS total_orders
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

-- Query 2: Total Sales Amount for Each Product (Revenue per Product)
SELECT 
    p.product_id, 
    p.product_name, 
    SUM(od.quantity * od.unit_price) AS total_revenue
FROM Products p
LEFT JOIN OrderDetails od ON p.product_id = od.product_id
GROUP BY p.product_id, p.product_name;

-- Query 3: Most Expensive Product Sold
SELECT 
    p.product_name, 
    MAX(od.unit_price) AS highest_price
FROM Products p
JOIN OrderDetails od ON p.product_id = od.product_id;

-- Query 4: Customers Who Placed Orders in the Last 30 Days
SELECT 
    DISTINCT c.first_name, 
    c.last_name
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);


-- Query 5: Total Amount Paid by Each Customer
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    SUM(p.payment_amount) AS total_paid
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
JOIN Payments p ON o.order_id = p.order_id
GROUP BY c.customer_id, c.first_name, c.last_name;

-- Query 6: Number of Products Sold by Category
SELECT 
    p.category, 
    SUM(od.quantity) AS total_sold
FROM Products p
LEFT JOIN OrderDetails od ON p.product_id = od.product_id
GROUP BY p.category;

-- Query 7: Pending Orders
SELECT 
    o.order_id, 
    o.order_date, 
    c.first_name, 
    c.last_name
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
WHERE o.order_status = 'Pending';

-- Query 8: Average Order Value
SELECT 
    AVG(o.total_amount) AS average_order_value
FROM Orders o;

-- Query 9: Top 5 Customers Who Spent the Most Money
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    SUM(o.total_amount) AS total_spent
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC
LIMIT 5;

-- Query 10: Products That Have Never Been Sold
SELECT 
    p.product_id, 
    p.product_name
FROM Products p
LEFT JOIN OrderDetails od ON p.product_id = od.product_id
WHERE od.product_id IS NULL;

